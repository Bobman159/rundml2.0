package com.bobman159.rundml.core.sql.impl.tests;

import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import com.bobman159.rundml.core.sql.impl.OrderByList;
import com.bobman159.rundml.core.sql.select.SelectTypesFactory;
import com.bobman159.rundml.core.sql.serialize.impl.BaseSelectSerializer;


class OrderByClauseTest {
	
	private static final String DFLTINTEGER = "dfltInteger";
	private static final String NOTNULLVARCHAR = "notNullVarchar";
	private static final SelectTypesFactory factory = SelectTypesFactory.getInstance();

	@BeforeAll
	static void setUpBeforeClass() {
		//No setup needed
	}

	@AfterAll
	static void tearDownAfterClass() {
		//Not needed at this time
	}

	@BeforeEach
	void setUp() {
		//Not needed at this time
	}

	@AfterEach
	void tearDown() {
		//Not needed at this time
	}

	@Test
	void orderByExpressionTest() {

		/* 
		 * The "order by" clause text will be generated by the SQL Statement model.
		 * The main purpose of this test is to verify the expression(s) IN the 
		 * "order by" are generated correctly, so here I will explicitly code the
		 * "order by" text 
		 */
		OrderByList orderByList = new OrderByList();
		orderByList.addOrderByClause(factory.orderByEntry(1));
		orderByList.addOrderByClause(factory.orderByEntry(2));
		orderByList.addOrderByClause(factory.orderByEntry(3));
		
		String stmtText = BaseSelectSerializer.getInstance().serializeOrderBy(orderByList);
		Assertions.assertEquals("order by 1,2,3",stmtText);
		
		OrderByList orderByList2 = new OrderByList();
		orderByList2.addOrderByClause(factory.orderByEntry(1)); 
		orderByList2.addOrderByClause(factory.orderByEntry(2));
		orderByList2.addOrderByClause(factory.orderByEntry(factory.column(DFLTINTEGER)));
		String stmtText2 = BaseSelectSerializer.getInstance().serializeOrderBy(orderByList2);	
		Assertions.assertEquals("order by 1,2,dfltInteger",stmtText2);		
		
		
		OrderByList orderByList3 = new OrderByList();
		orderByList3.addOrderByClause(factory.orderByEntry(factory.constant("Abcdefg")));
		String stmtText3 = BaseSelectSerializer.getInstance().serializeOrderBy(orderByList3);
		Assertions.assertEquals("order by 'Abcdefg'",stmtText3);
		
		

		OrderByList orderByList4 = new OrderByList();
		orderByList4.addOrderByClause(factory.orderByEntry(1).asc());
		String stmtText4 = BaseSelectSerializer.getInstance().serializeOrderBy(orderByList4);
		Assertions.assertEquals("order by 1 asc",stmtText4);
		
		OrderByList orderByList5 = new OrderByList();
		orderByList5.addOrderByClause(factory.orderByEntry(factory.column(DFLTINTEGER)).desc());
		String stmtText5 = BaseSelectSerializer.getInstance().serializeOrderBy(orderByList5);
		Assertions.assertEquals("order by dfltInteger desc",stmtText5);

		OrderByList orderByList6 = new OrderByList();
		orderByList6.addOrderByClause(factory.orderByEntry(1));
		orderByList6.addOrderByClause(factory.orderByEntry(2).desc());
		String stmtText6 = BaseSelectSerializer.getInstance().serializeOrderBy(orderByList6);
		Assertions.assertEquals("order by 1,2 desc",stmtText6);		

		
		OrderByList orderByList7 = new OrderByList();
		orderByList7.addOrderByClause(factory.orderByEntry(1));
		orderByList7.addOrderByClause(factory.orderByEntry(2).desc().nullsLast());
		String stmtText7 = BaseSelectSerializer.getInstance().serializeOrderBy(orderByList7);
		Assertions.assertEquals("order by 1,2 desc nulls last",stmtText7);		

		OrderByList orderByList8 = new OrderByList();
		orderByList8.addOrderByClause(factory.orderByEntry(factory.column(DFLTINTEGER)));
		orderByList8.addOrderByClause(factory.orderByEntry(factory.column(NOTNULLVARCHAR))
											 .desc().nullsFirst());
		String stmtText8 = BaseSelectSerializer.getInstance().serializeOrderBy(orderByList8);
		Assertions.assertEquals("order by dfltInteger,notNullVarchar desc nulls first",
							stmtText8);	

		OrderByList orderByList9 = new OrderByList();
		orderByList9.addOrderByClause(factory.orderByEntry(factory.column(NOTNULLVARCHAR))
																 .desc().nullsLast());
		orderByList9.addOrderByClause(factory.orderByEntry(1).asc().nullsFirst());
		orderByList9.addOrderByClause(factory.orderByEntry(factory.column(DFLTINTEGER)));
		String stmtText9 = BaseSelectSerializer.getInstance().serializeOrderBy(orderByList9);
		Assertions.assertEquals("order by notNullVarchar desc nulls last,1 asc nulls first," +
				     		"dfltInteger",stmtText9);
		
		OrderByList orderByList10 = new OrderByList();
		orderByList10.addOrderByClause(factory.orderByEntry(factory.column(DFLTINTEGER))
									  								.asc().nullsFirst());
		orderByList10.addOrderByClause(factory.orderByEntry(2).desc().nullsLast());
		orderByList10.addOrderByClause(factory.orderByEntry(3).desc().nullsFirst());
		String stmtText10 = BaseSelectSerializer.getInstance().serializeOrderBy(orderByList10);
		Assertions.assertEquals("order by dfltInteger asc nulls first," + 
						    "2 desc nulls last,3 desc nulls first",stmtText10);

	}

}
