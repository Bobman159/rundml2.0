package com.bobman159.rundml.core.sql.types.tests;

import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import com.bobman159.rundml.core.expressions.Expression;
import com.bobman159.rundml.core.sql.impl.OrderByClause;


class OrderByExpressionTest {
	
	private static final String DFLTINTEGER = "dfltInteger";
	private static final String NOTNULLVARCHAR = "notNullVarchar";

	@BeforeAll
	static void setUpBeforeClass() {
		//No setup needed
	}

	@AfterAll
	static void tearDownAfterClass() {
		//Not needed at this time
	}

	@BeforeEach
	void setUp() {
		//Not needed at this time
	}

	@AfterEach
	void tearDown() {
		//Not needed at this time
	}

	@Test
	void orderByExpressionTest() {

		/* 
		 * The "order by" clause text will be generated by the SQL Statement model.
		 * The main purpose of this test is to verify the expression(s) IN the 
		 * "order by" are generated correctly, so here I will explicitly code the
		 * "order by" text 
		 */
		String stmtText = new OrderByClause()
								.addExpression(Expression.orderBy(1))
								.addExpression(Expression.orderBy(2))
								.addExpression(Expression.orderBy(3))
								.serialize();
		Assertions.assertEquals("order by 1,2,3",stmtText);
		
		
		String stmtText2 = new OrderByClause()
							.addExpression(Expression.orderBy(1)) 
						   	.addExpression(Expression.orderBy(2))
						   	.addExpression(Expression.orderBy(
						   					Expression.column(DFLTINTEGER)))
							.serialize();			
		Assertions.assertEquals("order by 1,2,dfltInteger",stmtText2);		
		
		
		String stmtText3 = new OrderByClause()
				.addExpression(Expression.orderBy(Expression.string("Abcdefg")))
				.serialize();
		Assertions.assertEquals("order by 'Abcdefg'",stmtText3);
		
		
		String stmtText4 = new OrderByClause()
				.addExpression(Expression.orderBy(1).asc()).serialize();
		Assertions.assertEquals("order by 1 asc",stmtText4);
		
		
		String stmtText5 = new OrderByClause()
				.addExpression(Expression.orderBy(Expression.column(DFLTINTEGER))
				.desc())
				.serialize();
		Assertions.assertEquals("order by dfltInteger desc",stmtText5);

		
		String stmtText6 = new OrderByClause()
				.addExpression(Expression.orderBy(1))
				.addExpression(Expression.orderBy(2).desc())
				.serialize();
		Assertions.assertEquals("order by 1,2 desc",stmtText6);		

		
		String stmtText7 = new OrderByClause()
				.addExpression(Expression.orderBy(1))
				.addExpression(Expression.orderBy(2).desc().nullsLast())
				.serialize();
		Assertions.assertEquals("order by 1,2 desc nulls last",stmtText7);		

		
		String stmtText8 = new OrderByClause()
				.addExpression(Expression.orderBy(Expression.column(DFLTINTEGER)))
				.addExpression(Expression.orderBy(Expression.column(NOTNULLVARCHAR))
				.desc().nullsFirst())
				.serialize();
		Assertions.assertEquals("order by dfltInteger,notNullVarchar desc nulls first",
							stmtText8);	

		
		String stmtText9 = new OrderByClause()
				.addExpression(Expression.orderBy(Expression.column(NOTNULLVARCHAR))
						.desc().nullsLast())
				.addExpression(Expression.orderBy(1).asc().nullsFirst())
				.addExpression(Expression.orderBy(Expression.column(DFLTINTEGER)))
				.serialize();
		Assertions.assertEquals("order by notNullVarchar desc nulls last,1 asc nulls first," +
				     		"dfltInteger",stmtText9);
		
		
		String stmtText10 = new OrderByClause()
				.addExpression(Expression.orderBy(Expression.column(DFLTINTEGER))
									  .asc().nullsFirst())
				.addExpression(Expression.orderBy(2).desc().nullsLast())
				.addExpression(Expression.orderBy(3).desc().nullsFirst())
				.serialize();
		Assertions.assertEquals("order by dfltInteger asc nulls first," + 
						    "2 desc nulls last,3 desc nulls first",stmtText10);

	}

}
